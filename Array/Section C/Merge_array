//C++ program to merge two sorted array using constant space
#include <bits/stdc++.h>
using namespace std;
 
// swap function
void swapIfGrtr(int ar1[], int ar2[], int i, int j){
  if(ar1[i] > ar2[j]){
    swap(ar1[i], ar2[j]);
  }
}
   
  void merge(int ar1[], int ar2[], int m, int n){
    int len = m+n;
    int gap = len/2 + (len%2);
     
    while(gap>0){
      int left=0, right = left + gap;
      while(right<len){
        //if left pointer is in ar1[] and right in ar2[]
        if(left<m && right>=m){
          swapIfGrtr(ar1, ar2, left, right-m);
        }
         
        //if both left and right pointers are in ar2[]
        else if(left>=m && right>=m){
          swapIfGrtr(ar2, ar2, left-m, right-m);
        }
        //if both left and right pointers are in ar1[]
        else{
          swapIfGrtr(ar1, ar1, left, right);
        }
        left++;
        right++;
      }
      if(gap==1){
        break;
      }
      //decrement the gap value if right reaches the end i.e len
      gap = (gap/2) + (gap%2);
    }
  }
   
int main() {
 
    int ar1[] = { 1, 5, 9, 10, 15, 20 };
    int ar2[] = { 2, 3, 8, 13 };
    int m = sizeof(ar1) / sizeof(ar1[0]);
    int n = sizeof(ar2) / sizeof(ar2[0]);
    merge(ar1, ar2, m, n);
   
    cout << "After Merging \nFirst Array: ";
    for (int i = 0; i < m; i++)
        cout << ar1[i] << " ";
    cout << "\nSecond Array: ";
    for (int i = 0; i < n; i++)
        cout << ar2[i] << " ";
    return 0;
}
