
// C++ Program to find an element X
// that can be used to operate on an array and
// get equal elements
 
#include<bits/stdc++.h>
using namespace std;
 
// Prints "YES" and an element x if we can
// equalize array using x. Else prints "NO"
void canEqualise(int array[], int n)
{
    // We all the unique elements (using set
    // function).
    set<int> s;
    for(int i=0;i<n;i++)
    {
        s.insert(array[i]);
    }
   
    // if there are only 1 or 2 unique elements,
    // then we can add or subtract x from one of them
    // to get the other element
    if(s.size() == 1)
        cout<<"YES " << "0";
    else if (s.size() == 2)
    {
        auto x = s.begin();
        s.erase(x);
        auto y = s.begin();
        s.erase(y);
       cout<<"YES " << (*y-*x);
    }
         
   
    // If count of unique elements is three, then
    // difference between the middle and minimum
    // should be same as difference between maximum
    // and middle
    else if (s.size() == 3)
    {
        auto x = s.begin();
        s.erase(x);
        auto y = s.begin();
        s.erase(y);
        auto z = s.begin();
        s.erase(z);
         
        if ((*z-*y)==(*y-*x))
            cout<<"YES " << (*z-*y);
        else
            cout<<"NO";
    }
         
   
    // if there are more than three unique elements, then
    // we cannot add or subtract the same value from all
    // the elements.
    else
        cout<<"NO";
         
}
   
// Driver code
int main()
{
    int array[] = {55, 52, 52, 49, 52};
    int n = sizeof(array) / sizeof(array[0]);
    canEqualise(array,n);
}
