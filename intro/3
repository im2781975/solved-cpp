WAP that takes n integer numbers, where each of the numbers are non-negative and < n. You have to sort the numbers in O(n).

Sample input
Sample output
5
4  2  3  3  0
0 2 3 3 4
6
1 0 4 2 3 0
0 0 1 2 3 4

	Hint: As all the numbers are <n so you can track the frequency of each number. Then  Iterate from 0 to n-1 and output the numbers. This kind of sorting is called counting sort.

Why do you think linked-list requires more memory than an array when storing the same number of elements?


Note: All questions are about singly linked-lists here.
Write the singly linked list class and a function to add a new element to the front of a singly linked list. Also write a function to print all the elements of the linked-list.
Sample Input: [1, 2, 3, 4, 5], new element: 0
Sample Output: Singly linked list containing the elements [0, 1, 2, 3, 4, 5]

Write a function to remove the first element of a singly linked list.
Sample Input: [1, 2, 3, 4, 5]
Sample Output: Singly linked list containing the elements [2, 3, 4, 5]

Write a function to remove the last element of a singly linked list.
Sample Input: [1, 2, 3, 4, 5]
Sample Output: Singly linked list containing the elements [1, 2, 3, 4]

Write a function to find the i-th index of a singly linked list.
Sample Input: [1, 2, 3, 4, 5], i = 2
Sample Output: 3

Write a function to add a new element to the back of a singly linked list.
Sample Input: [1, 2, 3, 4, 5], new element: 0
Sample Output: Singly linked list containing the elements [1, 2, 3, 4, 5, 0]

Write a function to check if a singly linked list contains a given element.
Sample Input: [1, 2, 3, 4, 5], element: 3
Sample Output: True

Write a function to sort a singly linked list in ascending order?
Sample Input: [4, 2, 5, 1, 3]
Sample Output: Singly linked list containing the elements [1, 2, 3, 4, 5]
Hint: Look at the insertion sort code that we implemented in the array. Try to write the code in linked-list. Take your time and try your best to solve this problem on your own.




Note: All questions are about doubly linked-lists here.

Write the doubly linked list class and a function to add a new element to the front of a doubly linked list. Also write a function to print all the elements of the linked-list.
Sample Input: [1, 2, 3, 4, 5], new element: 0
Sample Output: Doubly linked list containing the elements [0, 1, 2, 3, 4, 5]

Write a function to remove the last element of a Doubly linked list.
Sample Input: [1, 2, 3, 4, 5]
Sample Output: Doubly linked list containing the elements [1, 2, 3, 4]

Write a function to find the i-th index of a doubly linked list.
Sample Input: [1, 2, 3, 4, 5], i = 2
Sample Output: 3

Write a function to check if a doubly linked list contains a given element.
Sample Input: [1, 2, 3, 4, 5], element: 3
Sample Output: True

Write a function to reverse a doubly linked list?
Sample Input: [1, 2, 3, 4, 5]
Sample Output: Doubly linked list containing the elements [5, 4, 3, 2, 1]

Write a function to insert an element at a specific index in a doubly linked list.
Sample Input: [1, 2, 3, 4, 5], index: 1, element: 0
Sample Output: Doubly linked list containing the elements [1, 0, 2, 3, 4, 5]

How would you delete a specific element from a doubly linked list?
Sample Input: [1, 2, 6, 4, 5], element: 6
Sample Output: Doubly linked list containing the elements [1, 2, 4, 5]

Write a function to check if a doubly linked list is a palindrome.
Sample Input: [1, 2, 3, 2, 1]
Sample Output: True
Sample Input: [1, 2, 3, 3, 1]
Sample Output: False

In the context of a doubly linked list, a palindrome is a list where the elements, when read from the first element to the last and then from the last element to the first, are the same. An example of a doubly linked list palindrome is [1, 2, 3, 2, 1], when read from the first element to the last it is [1, 2, 3, 2, 1] and when read from the last element to the first it is [1, 2, 3, 2, 1] as well. In this sense, a doubly linked list is a palindrome if the element at the first node is equal to the element at the last node, the element at the second node is equal to the element at the second to last node, and so on.








